//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * A control block within a Logical Device (in LLN0).
 * 
 * <p>Java class for tControlBlock complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tControlBlock">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tUnNaming">
 *       &lt;sequence>
 *         &lt;element name="Address" type="{http://www.iec.ch/61850/2003/SCL}tAddress" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="ldInst" use="required" type="{http://www.iec.ch/61850/2003/SCL}tName" />
 *       &lt;attribute name="cbName" use="required" type="{http://www.iec.ch/61850/2003/SCL}tName" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tControlBlock", propOrder = {
    "address"
})
@XmlSeeAlso({
    TSMV.class,
    TGSE.class
})
@Entity(name = "TControlBlock")
@Table(name = "TCONTROL_BLOCK")
public abstract class TControlBlock
    extends TUnNaming
    implements Equals, HashCode
{

    @XmlElement(name = "Address")
    protected TAddress address;
    @XmlAttribute(name = "ldInst", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    protected String ldInst;
    @XmlAttribute(name = "cbName", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    protected String cbName;

    /**
     * Gets the value of the address property.
     * 
     * @return
     *     possible object is
     *     {@link TAddress }
     *     
     */
    @ManyToOne(targetEntity = TAddress.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_TCONTROL_BLOCK_HJID")
    public TAddress getAddress() {
        return address;
    }

    /**
     * Sets the value of the address property.
     * 
     * @param value
     *     allowed object is
     *     {@link TAddress }
     *     
     */
    public void setAddress(TAddress value) {
        this.address = value;
    }

    /**
     * Gets the value of the ldInst property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LD_INST", length = 255)
    public String getLdInst() {
        return ldInst;
    }

    /**
     * Sets the value of the ldInst property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLdInst(String value) {
        this.ldInst = value;
    }

    /**
     * Gets the value of the cbName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CB_NAME", length = 255)
    public String getCbName() {
        return cbName;
    }

    /**
     * Sets the value of the cbName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCbName(String value) {
        this.cbName = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TControlBlock)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TControlBlock that = ((TControlBlock) object);
        {
            TAddress lhsAddress;
            lhsAddress = this.getAddress();
            TAddress rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            String lhsLdInst;
            lhsLdInst = this.getLdInst();
            String rhsLdInst;
            rhsLdInst = that.getLdInst();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ldInst", lhsLdInst), LocatorUtils.property(thatLocator, "ldInst", rhsLdInst), lhsLdInst, rhsLdInst)) {
                return false;
            }
        }
        {
            String lhsCbName;
            lhsCbName = this.getCbName();
            String rhsCbName;
            rhsCbName = that.getCbName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cbName", lhsCbName), LocatorUtils.property(thatLocator, "cbName", rhsCbName), lhsCbName, rhsCbName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TAddress theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            String theLdInst;
            theLdInst = this.getLdInst();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ldInst", theLdInst), currentHashCode, theLdInst);
        }
        {
            String theCbName;
            theCbName = this.getCbName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cbName", theCbName), currentHashCode, theCbName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
