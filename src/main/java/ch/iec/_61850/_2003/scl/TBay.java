//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tBay complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tBay">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tEquipmentContainer">
 *       &lt;sequence>
 *         &lt;element name="ConductingEquipment" type="{http://www.iec.ch/61850/2003/SCL}tConductingEquipment" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ConnectivityNode" type="{http://www.iec.ch/61850/2003/SCL}tConnectivityNode" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tBay", propOrder = {
    "conductingEquipment",
    "connectivityNode"
})
@Entity(name = "TBay")
@Table(name = "TBAY")
public class TBay
    extends TEquipmentContainer
    implements Equals, HashCode
{

    @XmlElement(name = "ConductingEquipment")
    protected List<TConductingEquipment> conductingEquipment;
    @XmlElement(name = "ConnectivityNode")
    protected List<TConnectivityNode> connectivityNode;

    /**
     * Gets the value of the conductingEquipment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conductingEquipment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConductingEquipment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TConductingEquipment }
     * 
     * 
     */
    @OneToMany(targetEntity = TConductingEquipment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONDUCTING_EQUIPMENT_TBAY_HJ_0")
    public List<TConductingEquipment> getConductingEquipment() {
        if (conductingEquipment == null) {
            conductingEquipment = new ArrayList<TConductingEquipment>();
        }
        return this.conductingEquipment;
    }

    /**
     * 
     * 
     */
    public void setConductingEquipment(List<TConductingEquipment> conductingEquipment) {
        this.conductingEquipment = conductingEquipment;
    }

    /**
     * Gets the value of the connectivityNode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the connectivityNode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConnectivityNode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TConnectivityNode }
     * 
     * 
     */
    @OneToMany(targetEntity = TConnectivityNode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONNECTIVITY_NODE_TBAY_HJID")
    public List<TConnectivityNode> getConnectivityNode() {
        if (connectivityNode == null) {
            connectivityNode = new ArrayList<TConnectivityNode>();
        }
        return this.connectivityNode;
    }

    /**
     * 
     * 
     */
    public void setConnectivityNode(List<TConnectivityNode> connectivityNode) {
        this.connectivityNode = connectivityNode;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TBay)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TBay that = ((TBay) object);
        {
            List<TConductingEquipment> lhsConductingEquipment;
            lhsConductingEquipment = (((this.conductingEquipment!= null)&&(!this.conductingEquipment.isEmpty()))?this.getConductingEquipment():null);
            List<TConductingEquipment> rhsConductingEquipment;
            rhsConductingEquipment = (((that.conductingEquipment!= null)&&(!that.conductingEquipment.isEmpty()))?that.getConductingEquipment():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conductingEquipment", lhsConductingEquipment), LocatorUtils.property(thatLocator, "conductingEquipment", rhsConductingEquipment), lhsConductingEquipment, rhsConductingEquipment)) {
                return false;
            }
        }
        {
            List<TConnectivityNode> lhsConnectivityNode;
            lhsConnectivityNode = (((this.connectivityNode!= null)&&(!this.connectivityNode.isEmpty()))?this.getConnectivityNode():null);
            List<TConnectivityNode> rhsConnectivityNode;
            rhsConnectivityNode = (((that.connectivityNode!= null)&&(!that.connectivityNode.isEmpty()))?that.getConnectivityNode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connectivityNode", lhsConnectivityNode), LocatorUtils.property(thatLocator, "connectivityNode", rhsConnectivityNode), lhsConnectivityNode, rhsConnectivityNode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<TConductingEquipment> theConductingEquipment;
            theConductingEquipment = (((this.conductingEquipment!= null)&&(!this.conductingEquipment.isEmpty()))?this.getConductingEquipment():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conductingEquipment", theConductingEquipment), currentHashCode, theConductingEquipment);
        }
        {
            List<TConnectivityNode> theConnectivityNode;
            theConnectivityNode = (((this.connectivityNode!= null)&&(!this.connectivityNode.isEmpty()))?this.getConnectivityNode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connectivityNode", theConnectivityNode), currentHashCode, theConnectivityNode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
