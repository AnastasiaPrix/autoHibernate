//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tAbstractDataAttribute complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tAbstractDataAttribute">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tUnNaming">
 *       &lt;sequence>
 *         &lt;element name="Val" type="{http://www.iec.ch/61850/2003/SCL}tVal" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="name" use="required" type="{http://www.iec.ch/61850/2003/SCL}tAttributeNameEnum" />
 *       &lt;attribute name="sAddr" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;attribute name="bType" use="required" type="{http://www.iec.ch/61850/2003/SCL}tBasicTypeEnum" />
 *       &lt;attribute name="valKind" type="{http://www.iec.ch/61850/2003/SCL}tValKindEnum" default="Set" />
 *       &lt;attribute name="type" type="{http://www.iec.ch/61850/2003/SCL}tAnyName" />
 *       &lt;attribute name="count" type="{http://www.w3.org/2001/XMLSchema}unsignedInt" default="0" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tAbstractDataAttribute", propOrder = {
    "val"
})
@XmlSeeAlso({
    TBDA.class,
    TDA.class
})
@Entity(name = "TAbstractDataAttribute")
@Table(name = "TABSTRACT_DATA_ATTRIBUTE")
public abstract class TAbstractDataAttribute
    extends TUnNaming
    implements Equals, HashCode
{

    @XmlElement(name = "Val")
    protected List<TVal> val;
    @XmlAttribute(name = "name", required = true)
    protected String name;
    @XmlAttribute(name = "sAddr")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String sAddr;
    @XmlAttribute(name = "bType", required = true)
    protected String bType;
    @XmlAttribute(name = "valKind")
    protected TValKindEnum valKind;
    @XmlAttribute(name = "type")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    protected String type;
    @XmlAttribute(name = "count")
    @XmlSchemaType(name = "unsignedInt")
    protected Long count;

    /**
     * Gets the value of the val property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the val property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TVal }
     * 
     * 
     */
    @OneToMany(targetEntity = TVal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VAL_TABSTRACT_DATA_ATTRIBUTE_0")
    public List<TVal> getVal() {
        if (val == null) {
            val = new ArrayList<TVal>();
        }
        return this.val;
    }

    /**
     * 
     * 
     */
    public void setVal(List<TVal> val) {
        this.val = val;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "NAME_")
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the sAddr property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SADDR", length = 255)
    public String getSAddr() {
        return sAddr;
    }

    /**
     * Sets the value of the sAddr property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSAddr(String value) {
        this.sAddr = value;
    }

    /**
     * Gets the value of the bType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "BTYPE")
    public String getBType() {
        return bType;
    }

    /**
     * Sets the value of the bType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBType(String value) {
        this.bType = value;
    }

    /**
     * Gets the value of the valKind property.
     * 
     * @return
     *     possible object is
     *     {@link TValKindEnum }
     *     
     */
    @Basic
    @Column(name = "VAL_KIND", length = 255)
    @Enumerated(EnumType.STRING)
    public TValKindEnum getValKind() {
        if (valKind == null) {
            return TValKindEnum.SET;
        } else {
            return valKind;
        }
    }

    /**
     * Sets the value of the valKind property.
     * 
     * @param value
     *     allowed object is
     *     {@link TValKindEnum }
     *     
     */
    public void setValKind(TValKindEnum value) {
        this.valKind = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "TYPE_", length = 255)
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the count property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "COUNT_", precision = 10, scale = 0)
    public long getCount() {
        if (count == null) {
            return  0L;
        } else {
            return count;
        }
    }

    /**
     * Sets the value of the count property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCount(Long value) {
        this.count = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TAbstractDataAttribute)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TAbstractDataAttribute that = ((TAbstractDataAttribute) object);
        {
            List<TVal> lhsVal;
            lhsVal = (((this.val!= null)&&(!this.val.isEmpty()))?this.getVal():null);
            List<TVal> rhsVal;
            rhsVal = (((that.val!= null)&&(!that.val.isEmpty()))?that.getVal():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "val", lhsVal), LocatorUtils.property(thatLocator, "val", rhsVal), lhsVal, rhsVal)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsSAddr;
            lhsSAddr = this.getSAddr();
            String rhsSAddr;
            rhsSAddr = that.getSAddr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sAddr", lhsSAddr), LocatorUtils.property(thatLocator, "sAddr", rhsSAddr), lhsSAddr, rhsSAddr)) {
                return false;
            }
        }
        {
            String lhsBType;
            lhsBType = this.getBType();
            String rhsBType;
            rhsBType = that.getBType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bType", lhsBType), LocatorUtils.property(thatLocator, "bType", rhsBType), lhsBType, rhsBType)) {
                return false;
            }
        }
        {
            TValKindEnum lhsValKind;
            lhsValKind = this.getValKind();
            TValKindEnum rhsValKind;
            rhsValKind = that.getValKind();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valKind", lhsValKind), LocatorUtils.property(thatLocator, "valKind", rhsValKind), lhsValKind, rhsValKind)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            long lhsCount;
            lhsCount = ((this.count!= null)?this.getCount(): 0L);
            long rhsCount;
            rhsCount = ((that.count!= null)?that.getCount(): 0L);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "count", lhsCount), LocatorUtils.property(thatLocator, "count", rhsCount), lhsCount, rhsCount)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<TVal> theVal;
            theVal = (((this.val!= null)&&(!this.val.isEmpty()))?this.getVal():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "val", theVal), currentHashCode, theVal);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theSAddr;
            theSAddr = this.getSAddr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sAddr", theSAddr), currentHashCode, theSAddr);
        }
        {
            String theBType;
            theBType = this.getBType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bType", theBType), currentHashCode, theBType);
        }
        {
            TValKindEnum theValKind;
            theValKind = this.getValKind();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valKind", theValKind), currentHashCode, theValKind);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            long theCount;
            theCount = ((this.count!= null)?this.getCount(): 0L);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "count", theCount), currentHashCode, theCount);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
