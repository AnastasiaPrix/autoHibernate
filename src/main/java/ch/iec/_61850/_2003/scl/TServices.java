//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;


/**
 * <p>Java class for tServices complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tServices">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="DynAssociation" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="SettingGroups" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;all>
 *                   &lt;element name="SGEdit" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *                   &lt;element name="ConfSG" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *                 &lt;/all>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="GetDirectory" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="GetDataObjectDefinition" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="DataObjectDirectory" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="GetDataSetValue" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="SetDataSetValue" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="DataSetDirectory" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="ConfDataSet" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMaxAndMaxAttributesAndModify" minOccurs="0"/>
 *         &lt;element name="DynDataSet" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMaxAndMaxAttributes" minOccurs="0"/>
 *         &lt;element name="ReadWrite" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="TimerActivatedControl" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="ConfReportControl" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMax" minOccurs="0"/>
 *         &lt;element name="GetCBValues" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="ConfLogControl" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMax" minOccurs="0"/>
 *         &lt;element name="ReportSettings" type="{http://www.iec.ch/61850/2003/SCL}tReportSettings" minOccurs="0"/>
 *         &lt;element name="LogSettings" type="{http://www.iec.ch/61850/2003/SCL}tLogSettings" minOccurs="0"/>
 *         &lt;element name="GSESettings" type="{http://www.iec.ch/61850/2003/SCL}tGSESettings" minOccurs="0"/>
 *         &lt;element name="SMVSettings" type="{http://www.iec.ch/61850/2003/SCL}tSMVSettings" minOccurs="0"/>
 *         &lt;element name="GSEDir" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="GOOSE" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMaxAndClient" minOccurs="0"/>
 *         &lt;element name="GSSE" type="{http://www.iec.ch/61850/2003/SCL}tServiceWithMaxAndClient" minOccurs="0"/>
 *         &lt;element name="FileHandling" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
 *         &lt;element name="ConfLNs" type="{http://www.iec.ch/61850/2003/SCL}tConfLNs" minOccurs="0"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tServices", propOrder = {

})
@Entity(name = "TServices")
@Table(name = "TSERVICES")
@Inheritance(strategy = InheritanceType.JOINED)
public class TServices
    implements Equals, HashCode
{

    @XmlElement(name = "DynAssociation")
    protected TServiceYesNo dynAssociation;
    @XmlElement(name = "SettingGroups")
    protected TServices.SettingGroups settingGroups;
    @XmlElement(name = "GetDirectory")
    protected TServiceYesNo getDirectory;
    @XmlElement(name = "GetDataObjectDefinition")
    protected TServiceYesNo getDataObjectDefinition;
    @XmlElement(name = "DataObjectDirectory")
    protected TServiceYesNo dataObjectDirectory;
    @XmlElement(name = "GetDataSetValue")
    protected TServiceYesNo getDataSetValue;
    @XmlElement(name = "SetDataSetValue")
    protected TServiceYesNo setDataSetValue;
    @XmlElement(name = "DataSetDirectory")
    protected TServiceYesNo dataSetDirectory;
    @XmlElement(name = "ConfDataSet")
    protected TServiceWithMaxAndMaxAttributesAndModify confDataSet;
    @XmlElement(name = "DynDataSet")
    protected TServiceWithMaxAndMaxAttributes dynDataSet;
    @XmlElement(name = "ReadWrite")
    protected TServiceYesNo readWrite;
    @XmlElement(name = "TimerActivatedControl")
    protected TServiceYesNo timerActivatedControl;
    @XmlElement(name = "ConfReportControl")
    protected TServiceWithMax confReportControl;
    @XmlElement(name = "GetCBValues")
    protected TServiceYesNo getCBValues;
    @XmlElement(name = "ConfLogControl")
    protected TServiceWithMax confLogControl;
    @XmlElement(name = "ReportSettings")
    protected TReportSettings reportSettings;
    @XmlElement(name = "LogSettings")
    protected TLogSettings logSettings;
    @XmlElement(name = "GSESettings")
    protected TGSESettings gseSettings;
    @XmlElement(name = "SMVSettings")
    protected TSMVSettings smvSettings;
    @XmlElement(name = "GSEDir")
    protected TServiceYesNo gseDir;
    @XmlElement(name = "GOOSE")
    protected TServiceWithMaxAndClient goose;
    @XmlElement(name = "GSSE")
    protected TServiceWithMaxAndClient gsse;
    @XmlElement(name = "FileHandling")
    protected TServiceYesNo fileHandling;
    @XmlElement(name = "ConfLNs")
    protected TConfLNs confLNs;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;

    /**
     * Gets the value of the dynAssociation property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DYN_ASSOCIATION_TSERVICES_HJ_0")
    public TServiceYesNo getDynAssociation() {
        return dynAssociation;
    }

    /**
     * Sets the value of the dynAssociation property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setDynAssociation(TServiceYesNo value) {
        this.dynAssociation = value;
    }

    /**
     * Gets the value of the settingGroups property.
     *
     * @return
     *     possible object is
     *     {@link TServices.SettingGroups }
     *
     */
    @ManyToOne(targetEntity = TServices.SettingGroups.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SETTING_GROUPS_TSERVICES_HJID")
    public TServices.SettingGroups getSettingGroups() {
        return settingGroups;
    }

    /**
     * Sets the value of the settingGroups property.
     *
     * @param value
     *     allowed object is
     *     {@link TServices.SettingGroups }
     *
     */
    public void setSettingGroups(TServices.SettingGroups value) {
        this.settingGroups = value;
    }

    /**
     * Gets the value of the getDirectory property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GET_DIRECTORY_TSERVICES_HJID")
    public TServiceYesNo getGetDirectory() {
        return getDirectory;
    }

    /**
     * Sets the value of the getDirectory property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setGetDirectory(TServiceYesNo value) {
        this.getDirectory = value;
    }

    /**
     * Gets the value of the getDataObjectDefinition property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GET_DATA_OBJECT_DEFINITION_T_0")
    public TServiceYesNo getGetDataObjectDefinition() {
        return getDataObjectDefinition;
    }

    /**
     * Sets the value of the getDataObjectDefinition property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setGetDataObjectDefinition(TServiceYesNo value) {
        this.getDataObjectDefinition = value;
    }

    /**
     * Gets the value of the dataObjectDirectory property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATA_OBJECT_DIRECTORY_TSERVI_0")
    public TServiceYesNo getDataObjectDirectory() {
        return dataObjectDirectory;
    }

    /**
     * Sets the value of the dataObjectDirectory property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setDataObjectDirectory(TServiceYesNo value) {
        this.dataObjectDirectory = value;
    }

    /**
     * Gets the value of the getDataSetValue property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GET_DATA_SET_VALUE_TSERVICES_0")
    public TServiceYesNo getGetDataSetValue() {
        return getDataSetValue;
    }

    /**
     * Sets the value of the getDataSetValue property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setGetDataSetValue(TServiceYesNo value) {
        this.getDataSetValue = value;
    }

    /**
     * Gets the value of the setDataSetValue property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SET_DATA_SET_VALUE_TSERVICES_0")
    public TServiceYesNo getSetDataSetValue() {
        return setDataSetValue;
    }

    /**
     * Sets the value of the setDataSetValue property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setSetDataSetValue(TServiceYesNo value) {
        this.setDataSetValue = value;
    }

    /**
     * Gets the value of the dataSetDirectory property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATA_SET_DIRECTORY_TSERVICES_0")
    public TServiceYesNo getDataSetDirectory() {
        return dataSetDirectory;
    }

    /**
     * Sets the value of the dataSetDirectory property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setDataSetDirectory(TServiceYesNo value) {
        this.dataSetDirectory = value;
    }

    /**
     * Gets the value of the confDataSet property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMaxAndMaxAttributesAndModify }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMaxAndMaxAttributesAndModify.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONF_DATA_SET_TSERVICES_HJID")
    public TServiceWithMaxAndMaxAttributesAndModify getConfDataSet() {
        return confDataSet;
    }

    /**
     * Sets the value of the confDataSet property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMaxAndMaxAttributesAndModify }
     *
     */
    public void setConfDataSet(TServiceWithMaxAndMaxAttributesAndModify value) {
        this.confDataSet = value;
    }

    /**
     * Gets the value of the dynDataSet property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMaxAndMaxAttributes }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMaxAndMaxAttributes.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DYN_DATA_SET_TSERVICES_HJID")
    public TServiceWithMaxAndMaxAttributes getDynDataSet() {
        return dynDataSet;
    }

    /**
     * Sets the value of the dynDataSet property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMaxAndMaxAttributes }
     *
     */
    public void setDynDataSet(TServiceWithMaxAndMaxAttributes value) {
        this.dynDataSet = value;
    }

    /**
     * Gets the value of the readWrite property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "READ_WRITE_TSERVICES_HJID")
    public TServiceYesNo getReadWrite() {
        return readWrite;
    }

    /**
     * Sets the value of the readWrite property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setReadWrite(TServiceYesNo value) {
        this.readWrite = value;
    }

    /**
     * Gets the value of the timerActivatedControl property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TIMER_ACTIVATED_CONTROL_TSER_0")
    public TServiceYesNo getTimerActivatedControl() {
        return timerActivatedControl;
    }

    /**
     * Sets the value of the timerActivatedControl property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setTimerActivatedControl(TServiceYesNo value) {
        this.timerActivatedControl = value;
    }

    /**
     * Gets the value of the confReportControl property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMax }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMax.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONF_REPORT_CONTROL_TSERVICE_0")
    public TServiceWithMax getConfReportControl() {
        return confReportControl;
    }

    /**
     * Sets the value of the confReportControl property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMax }
     *
     */
    public void setConfReportControl(TServiceWithMax value) {
        this.confReportControl = value;
    }

    /**
     * Gets the value of the getCBValues property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GET_CBVALUES_TSERVICES_HJID")
    public TServiceYesNo getGetCBValues() {
        return getCBValues;
    }

    /**
     * Sets the value of the getCBValues property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setGetCBValues(TServiceYesNo value) {
        this.getCBValues = value;
    }

    /**
     * Gets the value of the confLogControl property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMax }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMax.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONF_LOG_CONTROL_TSERVICES_H_0")
    public TServiceWithMax getConfLogControl() {
        return confLogControl;
    }

    /**
     * Sets the value of the confLogControl property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMax }
     *
     */
    public void setConfLogControl(TServiceWithMax value) {
        this.confLogControl = value;
    }

    /**
     * Gets the value of the reportSettings property.
     *
     * @return
     *     possible object is
     *     {@link TReportSettings }
     *
     */
    @ManyToOne(targetEntity = TReportSettings.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REPORT_SETTINGS_TSERVICES_HJ_0")
    public TReportSettings getReportSettings() {
        return reportSettings;
    }

    /**
     * Sets the value of the reportSettings property.
     *
     * @param value
     *     allowed object is
     *     {@link TReportSettings }
     *
     */
    public void setReportSettings(TReportSettings value) {
        this.reportSettings = value;
    }

    /**
     * Gets the value of the logSettings property.
     *
     * @return
     *     possible object is
     *     {@link TLogSettings }
     *
     */
    @ManyToOne(targetEntity = TLogSettings.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOG_SETTINGS_TSERVICES_HJID")
    public TLogSettings getLogSettings() {
        return logSettings;
    }

    /**
     * Sets the value of the logSettings property.
     *
     * @param value
     *     allowed object is
     *     {@link TLogSettings }
     *
     */
    public void setLogSettings(TLogSettings value) {
        this.logSettings = value;
    }

    /**
     * Gets the value of the gseSettings property.
     *
     * @return
     *     possible object is
     *     {@link TGSESettings }
     *
     */
    @ManyToOne(targetEntity = TGSESettings.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GSESETTINGS_TSERVICES_HJID")
    public TGSESettings getGSESettings() {
        return gseSettings;
    }

    /**
     * Sets the value of the gseSettings property.
     *
     * @param value
     *     allowed object is
     *     {@link TGSESettings }
     *
     */
    public void setGSESettings(TGSESettings value) {
        this.gseSettings = value;
    }

    /**
     * Gets the value of the smvSettings property.
     *
     * @return
     *     possible object is
     *     {@link TSMVSettings }
     *
     */
    @ManyToOne(targetEntity = TSMVSettings.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SMVSETTINGS_TSERVICES_HJID")
    public TSMVSettings getSMVSettings() {
        return smvSettings;
    }

    /**
     * Sets the value of the smvSettings property.
     *
     * @param value
     *     allowed object is
     *     {@link TSMVSettings }
     *
     */
    public void setSMVSettings(TSMVSettings value) {
        this.smvSettings = value;
    }

    /**
     * Gets the value of the gseDir property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GSEDIR_TSERVICES_HJID")
    public TServiceYesNo getGSEDir() {
        return gseDir;
    }

    /**
     * Sets the value of the gseDir property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setGSEDir(TServiceYesNo value) {
        this.gseDir = value;
    }

    /**
     * Gets the value of the goose property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMaxAndClient }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMaxAndClient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GOOSE_TSERVICES_HJID")
    public TServiceWithMaxAndClient getGOOSE() {
        return goose;
    }

    /**
     * Sets the value of the goose property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMaxAndClient }
     *
     */
    public void setGOOSE(TServiceWithMaxAndClient value) {
        this.goose = value;
    }

    /**
     * Gets the value of the gsse property.
     *
     * @return
     *     possible object is
     *     {@link TServiceWithMaxAndClient }
     *
     */
    @ManyToOne(targetEntity = TServiceWithMaxAndClient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GSSE_TSERVICES_HJID")
    public TServiceWithMaxAndClient getGSSE() {
        return gsse;
    }

    /**
     * Sets the value of the gsse property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceWithMaxAndClient }
     *
     */
    public void setGSSE(TServiceWithMaxAndClient value) {
        this.gsse = value;
    }

    /**
     * Gets the value of the fileHandling property.
     *
     * @return
     *     possible object is
     *     {@link TServiceYesNo }
     *
     */
    @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FILE_HANDLING_TSERVICES_HJID")
    public TServiceYesNo getFileHandling() {
        return fileHandling;
    }

    /**
     * Sets the value of the fileHandling property.
     *
     * @param value
     *     allowed object is
     *     {@link TServiceYesNo }
     *
     */
    public void setFileHandling(TServiceYesNo value) {
        this.fileHandling = value;
    }

    /**
     * Gets the value of the confLNs property.
     *
     * @return
     *     possible object is
     *     {@link TConfLNs }
     *
     */
    @ManyToOne(targetEntity = TConfLNs.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONF_LNS_TSERVICES_HJID")
    public TConfLNs getConfLNs() {
        return confLNs;
    }

    /**
     * Sets the value of the confLNs property.
     *
     * @param value
     *     allowed object is
     *     {@link TConfLNs }
     *
     */
    public void setConfLNs(TConfLNs value) {
        this.confLNs = value;
    }

    /**
     * Gets the value of the hjid property.
     *
     * @return
     *     possible object is
     *     {@link Long }
     *
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * Sets the value of the hjid property.
     *
     * @param value
     *     allowed object is
     *     {@link Long }
     *
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TServices)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TServices that = ((TServices) object);
        {
            TServiceYesNo lhsDynAssociation;
            lhsDynAssociation = this.getDynAssociation();
            TServiceYesNo rhsDynAssociation;
            rhsDynAssociation = that.getDynAssociation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dynAssociation", lhsDynAssociation), LocatorUtils.property(thatLocator, "dynAssociation", rhsDynAssociation), lhsDynAssociation, rhsDynAssociation)) {
                return false;
            }
        }
        {
            TServices.SettingGroups lhsSettingGroups;
            lhsSettingGroups = this.getSettingGroups();
            TServices.SettingGroups rhsSettingGroups;
            rhsSettingGroups = that.getSettingGroups();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "settingGroups", lhsSettingGroups), LocatorUtils.property(thatLocator, "settingGroups", rhsSettingGroups), lhsSettingGroups, rhsSettingGroups)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsGetDirectory;
            lhsGetDirectory = this.getGetDirectory();
            TServiceYesNo rhsGetDirectory;
            rhsGetDirectory = that.getGetDirectory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "getDirectory", lhsGetDirectory), LocatorUtils.property(thatLocator, "getDirectory", rhsGetDirectory), lhsGetDirectory, rhsGetDirectory)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsGetDataObjectDefinition;
            lhsGetDataObjectDefinition = this.getGetDataObjectDefinition();
            TServiceYesNo rhsGetDataObjectDefinition;
            rhsGetDataObjectDefinition = that.getGetDataObjectDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "getDataObjectDefinition", lhsGetDataObjectDefinition), LocatorUtils.property(thatLocator, "getDataObjectDefinition", rhsGetDataObjectDefinition), lhsGetDataObjectDefinition, rhsGetDataObjectDefinition)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsDataObjectDirectory;
            lhsDataObjectDirectory = this.getDataObjectDirectory();
            TServiceYesNo rhsDataObjectDirectory;
            rhsDataObjectDirectory = that.getDataObjectDirectory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataObjectDirectory", lhsDataObjectDirectory), LocatorUtils.property(thatLocator, "dataObjectDirectory", rhsDataObjectDirectory), lhsDataObjectDirectory, rhsDataObjectDirectory)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsGetDataSetValue;
            lhsGetDataSetValue = this.getGetDataSetValue();
            TServiceYesNo rhsGetDataSetValue;
            rhsGetDataSetValue = that.getGetDataSetValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "getDataSetValue", lhsGetDataSetValue), LocatorUtils.property(thatLocator, "getDataSetValue", rhsGetDataSetValue), lhsGetDataSetValue, rhsGetDataSetValue)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsSetDataSetValue;
            lhsSetDataSetValue = this.getSetDataSetValue();
            TServiceYesNo rhsSetDataSetValue;
            rhsSetDataSetValue = that.getSetDataSetValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "setDataSetValue", lhsSetDataSetValue), LocatorUtils.property(thatLocator, "setDataSetValue", rhsSetDataSetValue), lhsSetDataSetValue, rhsSetDataSetValue)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsDataSetDirectory;
            lhsDataSetDirectory = this.getDataSetDirectory();
            TServiceYesNo rhsDataSetDirectory;
            rhsDataSetDirectory = that.getDataSetDirectory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataSetDirectory", lhsDataSetDirectory), LocatorUtils.property(thatLocator, "dataSetDirectory", rhsDataSetDirectory), lhsDataSetDirectory, rhsDataSetDirectory)) {
                return false;
            }
        }
        {
            TServiceWithMaxAndMaxAttributesAndModify lhsConfDataSet;
            lhsConfDataSet = this.getConfDataSet();
            TServiceWithMaxAndMaxAttributesAndModify rhsConfDataSet;
            rhsConfDataSet = that.getConfDataSet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confDataSet", lhsConfDataSet), LocatorUtils.property(thatLocator, "confDataSet", rhsConfDataSet), lhsConfDataSet, rhsConfDataSet)) {
                return false;
            }
        }
        {
            TServiceWithMaxAndMaxAttributes lhsDynDataSet;
            lhsDynDataSet = this.getDynDataSet();
            TServiceWithMaxAndMaxAttributes rhsDynDataSet;
            rhsDynDataSet = that.getDynDataSet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dynDataSet", lhsDynDataSet), LocatorUtils.property(thatLocator, "dynDataSet", rhsDynDataSet), lhsDynDataSet, rhsDynDataSet)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsReadWrite;
            lhsReadWrite = this.getReadWrite();
            TServiceYesNo rhsReadWrite;
            rhsReadWrite = that.getReadWrite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "readWrite", lhsReadWrite), LocatorUtils.property(thatLocator, "readWrite", rhsReadWrite), lhsReadWrite, rhsReadWrite)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsTimerActivatedControl;
            lhsTimerActivatedControl = this.getTimerActivatedControl();
            TServiceYesNo rhsTimerActivatedControl;
            rhsTimerActivatedControl = that.getTimerActivatedControl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timerActivatedControl", lhsTimerActivatedControl), LocatorUtils.property(thatLocator, "timerActivatedControl", rhsTimerActivatedControl), lhsTimerActivatedControl, rhsTimerActivatedControl)) {
                return false;
            }
        }
        {
            TServiceWithMax lhsConfReportControl;
            lhsConfReportControl = this.getConfReportControl();
            TServiceWithMax rhsConfReportControl;
            rhsConfReportControl = that.getConfReportControl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confReportControl", lhsConfReportControl), LocatorUtils.property(thatLocator, "confReportControl", rhsConfReportControl), lhsConfReportControl, rhsConfReportControl)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsGetCBValues;
            lhsGetCBValues = this.getGetCBValues();
            TServiceYesNo rhsGetCBValues;
            rhsGetCBValues = that.getGetCBValues();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "getCBValues", lhsGetCBValues), LocatorUtils.property(thatLocator, "getCBValues", rhsGetCBValues), lhsGetCBValues, rhsGetCBValues)) {
                return false;
            }
        }
        {
            TServiceWithMax lhsConfLogControl;
            lhsConfLogControl = this.getConfLogControl();
            TServiceWithMax rhsConfLogControl;
            rhsConfLogControl = that.getConfLogControl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confLogControl", lhsConfLogControl), LocatorUtils.property(thatLocator, "confLogControl", rhsConfLogControl), lhsConfLogControl, rhsConfLogControl)) {
                return false;
            }
        }
        {
            TReportSettings lhsReportSettings;
            lhsReportSettings = this.getReportSettings();
            TReportSettings rhsReportSettings;
            rhsReportSettings = that.getReportSettings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportSettings", lhsReportSettings), LocatorUtils.property(thatLocator, "reportSettings", rhsReportSettings), lhsReportSettings, rhsReportSettings)) {
                return false;
            }
        }
        {
            TLogSettings lhsLogSettings;
            lhsLogSettings = this.getLogSettings();
            TLogSettings rhsLogSettings;
            rhsLogSettings = that.getLogSettings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "logSettings", lhsLogSettings), LocatorUtils.property(thatLocator, "logSettings", rhsLogSettings), lhsLogSettings, rhsLogSettings)) {
                return false;
            }
        }
        {
            TGSESettings lhsGSESettings;
            lhsGSESettings = this.getGSESettings();
            TGSESettings rhsGSESettings;
            rhsGSESettings = that.getGSESettings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gseSettings", lhsGSESettings), LocatorUtils.property(thatLocator, "gseSettings", rhsGSESettings), lhsGSESettings, rhsGSESettings)) {
                return false;
            }
        }
        {
            TSMVSettings lhsSMVSettings;
            lhsSMVSettings = this.getSMVSettings();
            TSMVSettings rhsSMVSettings;
            rhsSMVSettings = that.getSMVSettings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smvSettings", lhsSMVSettings), LocatorUtils.property(thatLocator, "smvSettings", rhsSMVSettings), lhsSMVSettings, rhsSMVSettings)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsGSEDir;
            lhsGSEDir = this.getGSEDir();
            TServiceYesNo rhsGSEDir;
            rhsGSEDir = that.getGSEDir();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gseDir", lhsGSEDir), LocatorUtils.property(thatLocator, "gseDir", rhsGSEDir), lhsGSEDir, rhsGSEDir)) {
                return false;
            }
        }
        {
            TServiceWithMaxAndClient lhsGOOSE;
            lhsGOOSE = this.getGOOSE();
            TServiceWithMaxAndClient rhsGOOSE;
            rhsGOOSE = that.getGOOSE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "goose", lhsGOOSE), LocatorUtils.property(thatLocator, "goose", rhsGOOSE), lhsGOOSE, rhsGOOSE)) {
                return false;
            }
        }
        {
            TServiceWithMaxAndClient lhsGSSE;
            lhsGSSE = this.getGSSE();
            TServiceWithMaxAndClient rhsGSSE;
            rhsGSSE = that.getGSSE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gsse", lhsGSSE), LocatorUtils.property(thatLocator, "gsse", rhsGSSE), lhsGSSE, rhsGSSE)) {
                return false;
            }
        }
        {
            TServiceYesNo lhsFileHandling;
            lhsFileHandling = this.getFileHandling();
            TServiceYesNo rhsFileHandling;
            rhsFileHandling = that.getFileHandling();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileHandling", lhsFileHandling), LocatorUtils.property(thatLocator, "fileHandling", rhsFileHandling), lhsFileHandling, rhsFileHandling)) {
                return false;
            }
        }
        {
            TConfLNs lhsConfLNs;
            lhsConfLNs = this.getConfLNs();
            TConfLNs rhsConfLNs;
            rhsConfLNs = that.getConfLNs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confLNs", lhsConfLNs), LocatorUtils.property(thatLocator, "confLNs", rhsConfLNs), lhsConfLNs, rhsConfLNs)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TServiceYesNo theDynAssociation;
            theDynAssociation = this.getDynAssociation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dynAssociation", theDynAssociation), currentHashCode, theDynAssociation);
        }
        {
            TServices.SettingGroups theSettingGroups;
            theSettingGroups = this.getSettingGroups();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "settingGroups", theSettingGroups), currentHashCode, theSettingGroups);
        }
        {
            TServiceYesNo theGetDirectory;
            theGetDirectory = this.getGetDirectory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "getDirectory", theGetDirectory), currentHashCode, theGetDirectory);
        }
        {
            TServiceYesNo theGetDataObjectDefinition;
            theGetDataObjectDefinition = this.getGetDataObjectDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "getDataObjectDefinition", theGetDataObjectDefinition), currentHashCode, theGetDataObjectDefinition);
        }
        {
            TServiceYesNo theDataObjectDirectory;
            theDataObjectDirectory = this.getDataObjectDirectory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataObjectDirectory", theDataObjectDirectory), currentHashCode, theDataObjectDirectory);
        }
        {
            TServiceYesNo theGetDataSetValue;
            theGetDataSetValue = this.getGetDataSetValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "getDataSetValue", theGetDataSetValue), currentHashCode, theGetDataSetValue);
        }
        {
            TServiceYesNo theSetDataSetValue;
            theSetDataSetValue = this.getSetDataSetValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "setDataSetValue", theSetDataSetValue), currentHashCode, theSetDataSetValue);
        }
        {
            TServiceYesNo theDataSetDirectory;
            theDataSetDirectory = this.getDataSetDirectory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataSetDirectory", theDataSetDirectory), currentHashCode, theDataSetDirectory);
        }
        {
            TServiceWithMaxAndMaxAttributesAndModify theConfDataSet;
            theConfDataSet = this.getConfDataSet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confDataSet", theConfDataSet), currentHashCode, theConfDataSet);
        }
        {
            TServiceWithMaxAndMaxAttributes theDynDataSet;
            theDynDataSet = this.getDynDataSet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dynDataSet", theDynDataSet), currentHashCode, theDynDataSet);
        }
        {
            TServiceYesNo theReadWrite;
            theReadWrite = this.getReadWrite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "readWrite", theReadWrite), currentHashCode, theReadWrite);
        }
        {
            TServiceYesNo theTimerActivatedControl;
            theTimerActivatedControl = this.getTimerActivatedControl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timerActivatedControl", theTimerActivatedControl), currentHashCode, theTimerActivatedControl);
        }
        {
            TServiceWithMax theConfReportControl;
            theConfReportControl = this.getConfReportControl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confReportControl", theConfReportControl), currentHashCode, theConfReportControl);
        }
        {
            TServiceYesNo theGetCBValues;
            theGetCBValues = this.getGetCBValues();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "getCBValues", theGetCBValues), currentHashCode, theGetCBValues);
        }
        {
            TServiceWithMax theConfLogControl;
            theConfLogControl = this.getConfLogControl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confLogControl", theConfLogControl), currentHashCode, theConfLogControl);
        }
        {
            TReportSettings theReportSettings;
            theReportSettings = this.getReportSettings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportSettings", theReportSettings), currentHashCode, theReportSettings);
        }
        {
            TLogSettings theLogSettings;
            theLogSettings = this.getLogSettings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "logSettings", theLogSettings), currentHashCode, theLogSettings);
        }
        {
            TGSESettings theGSESettings;
            theGSESettings = this.getGSESettings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gseSettings", theGSESettings), currentHashCode, theGSESettings);
        }
        {
            TSMVSettings theSMVSettings;
            theSMVSettings = this.getSMVSettings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smvSettings", theSMVSettings), currentHashCode, theSMVSettings);
        }
        {
            TServiceYesNo theGSEDir;
            theGSEDir = this.getGSEDir();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gseDir", theGSEDir), currentHashCode, theGSEDir);
        }
        {
            TServiceWithMaxAndClient theGOOSE;
            theGOOSE = this.getGOOSE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "goose", theGOOSE), currentHashCode, theGOOSE);
        }
        {
            TServiceWithMaxAndClient theGSSE;
            theGSSE = this.getGSSE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gsse", theGSSE), currentHashCode, theGSSE);
        }
        {
            TServiceYesNo theFileHandling;
            theFileHandling = this.getFileHandling();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileHandling", theFileHandling), currentHashCode, theFileHandling);
        }
        {
            TConfLNs theConfLNs;
            theConfLNs = this.getConfLNs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confLNs", theConfLNs), currentHashCode, theConfLNs);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;all>
     *         &lt;element name="SGEdit" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
     *         &lt;element name="ConfSG" type="{http://www.iec.ch/61850/2003/SCL}tServiceYesNo" minOccurs="0"/>
     *       &lt;/all>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {

    })
    @Entity(name = "TServices$SettingGroups")
    @Table(name = "SETTING_GROUPS")
    @Inheritance(strategy = InheritanceType.JOINED)
    public static class SettingGroups
        implements Equals, HashCode
    {

        @XmlElement(name = "SGEdit")
        protected TServiceYesNo sgEdit;
        @XmlElement(name = "ConfSG")
        protected TServiceYesNo confSG;
        @XmlAttribute(name = "Hjid")
        protected Long hjid;

        /**
         * Gets the value of the sgEdit property.
         *
         * @return
         *     possible object is
         *     {@link TServiceYesNo }
         *
         */
        @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
            CascadeType.ALL
        })
        @JoinColumn(name = "SGEDIT_SETTING_GROUPS_HJID")
        public TServiceYesNo getSGEdit() {
            return sgEdit;
        }

        /**
         * Sets the value of the sgEdit property.
         *
         * @param value
         *     allowed object is
         *     {@link TServiceYesNo }
         *
         */
        public void setSGEdit(TServiceYesNo value) {
            this.sgEdit = value;
        }

        /**
         * Gets the value of the confSG property.
         *
         * @return
         *     possible object is
         *     {@link TServiceYesNo }
         *
         */
        @ManyToOne(targetEntity = TServiceYesNo.class, cascade = {
            CascadeType.ALL
        })
        @JoinColumn(name = "CONF_SG_SETTING_GROUPS_HJID")
        public TServiceYesNo getConfSG() {
            return confSG;
        }

        /**
         * Sets the value of the confSG property.
         *
         * @param value
         *     allowed object is
         *     {@link TServiceYesNo }
         *
         */
        public void setConfSG(TServiceYesNo value) {
            this.confSG = value;
        }

        /**
         * Gets the value of the hjid property.
         *
         * @return
         *     possible object is
         *     {@link Long }
         *
         */
        @Id
        @Column(name = "HJID")
        @GeneratedValue(strategy = GenerationType.AUTO)
        public Long getHjid() {
            return hjid;
        }

        /**
         * Sets the value of the hjid property.
         *
         * @param value
         *     allowed object is
         *     {@link Long }
         *
         */
        public void setHjid(Long value) {
            this.hjid = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TServices.SettingGroups)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TServices.SettingGroups that = ((TServices.SettingGroups) object);
            {
                TServiceYesNo lhsSGEdit;
                lhsSGEdit = this.getSGEdit();
                TServiceYesNo rhsSGEdit;
                rhsSGEdit = that.getSGEdit();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sgEdit", lhsSGEdit), LocatorUtils.property(thatLocator, "sgEdit", rhsSGEdit), lhsSGEdit, rhsSGEdit)) {
                    return false;
                }
            }
            {
                TServiceYesNo lhsConfSG;
                lhsConfSG = this.getConfSG();
                TServiceYesNo rhsConfSG;
                rhsConfSG = that.getConfSG();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "confSG", lhsConfSG), LocatorUtils.property(thatLocator, "confSG", rhsConfSG), lhsConfSG, rhsConfSG)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                TServiceYesNo theSGEdit;
                theSGEdit = this.getSGEdit();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sgEdit", theSGEdit), currentHashCode, theSGEdit);
            }
            {
                TServiceYesNo theConfSG;
                theConfSG = this.getConfSG();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confSG", theConfSG), currentHashCode, theConfSG);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

    }

}
