//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tConnectedAP complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tConnectedAP">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tUnNaming">
 *       &lt;sequence>
 *         &lt;element name="Address" type="{http://www.iec.ch/61850/2003/SCL}tAddress" minOccurs="0"/>
 *         &lt;element name="GSE" type="{http://www.iec.ch/61850/2003/SCL}tGSE" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="SMV" type="{http://www.iec.ch/61850/2003/SCL}tSMV" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="PhysConn" type="{http://www.iec.ch/61850/2003/SCL}tPhysConn" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="iedName" use="required" type="{http://www.iec.ch/61850/2003/SCL}tName" />
 *       &lt;attribute name="apName" use="required" type="{http://www.iec.ch/61850/2003/SCL}tName" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tConnectedAP", propOrder = {
    "address",
    "gse",
    "smv",
    "physConn"
})
@Entity(name = "TConnectedAP")
@Table(name = "TCONNECTED_AP")
public class TConnectedAP
    extends TUnNaming
    implements Equals, HashCode
{

    @XmlElement(name = "Address")
    protected TAddress address;
    @XmlElement(name = "GSE")
    protected List<TGSE> gse;
    @XmlElement(name = "SMV")
    protected List<TSMV> smv;
    @XmlElement(name = "PhysConn")
    protected List<TPhysConn> physConn;
    @XmlAttribute(name = "iedName", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    protected String iedName;
    @XmlAttribute(name = "apName", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    protected String apName;

    /**
     * Gets the value of the address property.
     * 
     * @return
     *     possible object is
     *     {@link TAddress }
     *     
     */
    @ManyToOne(targetEntity = TAddress.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_TCONNECTED_AP_HJID")
    public TAddress getAddress() {
        return address;
    }

    /**
     * Sets the value of the address property.
     * 
     * @param value
     *     allowed object is
     *     {@link TAddress }
     *     
     */
    public void setAddress(TAddress value) {
        this.address = value;
    }

    /**
     * Gets the value of the gse property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the gse property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGSE().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TGSE }
     * 
     * 
     */
    @OneToMany(targetEntity = TGSE.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GSE_TCONNECTED_AP_HJID")
    public List<TGSE> getGSE() {
        if (gse == null) {
            gse = new ArrayList<TGSE>();
        }
        return this.gse;
    }

    /**
     * 
     * 
     */
    public void setGSE(List<TGSE> gse) {
        this.gse = gse;
    }

    /**
     * Gets the value of the smv property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the smv property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSMV().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TSMV }
     * 
     * 
     */
    @OneToMany(targetEntity = TSMV.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SMV_TCONNECTED_AP_HJID")
    public List<TSMV> getSMV() {
        if (smv == null) {
            smv = new ArrayList<TSMV>();
        }
        return this.smv;
    }

    /**
     * 
     * 
     */
    public void setSMV(List<TSMV> smv) {
        this.smv = smv;
    }

    /**
     * Gets the value of the physConn property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the physConn property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhysConn().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TPhysConn }
     * 
     * 
     */
    @OneToMany(targetEntity = TPhysConn.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PHYS_CONN_TCONNECTED_AP_HJID")
    public List<TPhysConn> getPhysConn() {
        if (physConn == null) {
            physConn = new ArrayList<TPhysConn>();
        }
        return this.physConn;
    }

    /**
     * 
     * 
     */
    public void setPhysConn(List<TPhysConn> physConn) {
        this.physConn = physConn;
    }

    /**
     * Gets the value of the iedName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IED_NAME", length = 255)
    public String getIedName() {
        return iedName;
    }

    /**
     * Sets the value of the iedName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIedName(String value) {
        this.iedName = value;
    }

    /**
     * Gets the value of the apName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "AP_NAME", length = 255)
    public String getApName() {
        return apName;
    }

    /**
     * Sets the value of the apName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApName(String value) {
        this.apName = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TConnectedAP)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TConnectedAP that = ((TConnectedAP) object);
        {
            TAddress lhsAddress;
            lhsAddress = this.getAddress();
            TAddress rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            List<TGSE> lhsGSE;
            lhsGSE = (((this.gse!= null)&&(!this.gse.isEmpty()))?this.getGSE():null);
            List<TGSE> rhsGSE;
            rhsGSE = (((that.gse!= null)&&(!that.gse.isEmpty()))?that.getGSE():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gse", lhsGSE), LocatorUtils.property(thatLocator, "gse", rhsGSE), lhsGSE, rhsGSE)) {
                return false;
            }
        }
        {
            List<TSMV> lhsSMV;
            lhsSMV = (((this.smv!= null)&&(!this.smv.isEmpty()))?this.getSMV():null);
            List<TSMV> rhsSMV;
            rhsSMV = (((that.smv!= null)&&(!that.smv.isEmpty()))?that.getSMV():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smv", lhsSMV), LocatorUtils.property(thatLocator, "smv", rhsSMV), lhsSMV, rhsSMV)) {
                return false;
            }
        }
        {
            List<TPhysConn> lhsPhysConn;
            lhsPhysConn = (((this.physConn!= null)&&(!this.physConn.isEmpty()))?this.getPhysConn():null);
            List<TPhysConn> rhsPhysConn;
            rhsPhysConn = (((that.physConn!= null)&&(!that.physConn.isEmpty()))?that.getPhysConn():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "physConn", lhsPhysConn), LocatorUtils.property(thatLocator, "physConn", rhsPhysConn), lhsPhysConn, rhsPhysConn)) {
                return false;
            }
        }
        {
            String lhsIedName;
            lhsIedName = this.getIedName();
            String rhsIedName;
            rhsIedName = that.getIedName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "iedName", lhsIedName), LocatorUtils.property(thatLocator, "iedName", rhsIedName), lhsIedName, rhsIedName)) {
                return false;
            }
        }
        {
            String lhsApName;
            lhsApName = this.getApName();
            String rhsApName;
            rhsApName = that.getApName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "apName", lhsApName), LocatorUtils.property(thatLocator, "apName", rhsApName), lhsApName, rhsApName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TAddress theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            List<TGSE> theGSE;
            theGSE = (((this.gse!= null)&&(!this.gse.isEmpty()))?this.getGSE():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gse", theGSE), currentHashCode, theGSE);
        }
        {
            List<TSMV> theSMV;
            theSMV = (((this.smv!= null)&&(!this.smv.isEmpty()))?this.getSMV():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smv", theSMV), currentHashCode, theSMV);
        }
        {
            List<TPhysConn> thePhysConn;
            thePhysConn = (((this.physConn!= null)&&(!this.physConn.isEmpty()))?this.getPhysConn():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "physConn", thePhysConn), currentHashCode, thePhysConn);
        }
        {
            String theIedName;
            theIedName = this.getIedName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "iedName", theIedName), currentHashCode, theIedName);
        }
        {
            String theApName;
            theApName = this.getApName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "apName", theApName), currentHashCode, theApName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
