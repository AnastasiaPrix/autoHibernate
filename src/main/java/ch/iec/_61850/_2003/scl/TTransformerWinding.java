//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;


/**
 * <p>Java class for tTransformerWinding complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tTransformerWinding">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tAbstractConductingEquipment">
 *       &lt;sequence>
 *         &lt;element name="TapChanger" type="{http://www.iec.ch/61850/2003/SCL}tTapChanger" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="type" use="required" type="{http://www.iec.ch/61850/2003/SCL}tTransformerWindingEnum" fixed="PTW" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tTransformerWinding", propOrder = {
    "tapChanger"
})
@Entity(name = "TTransformerWinding")
@Table(name = "TTRANSFORMER_WINDING")
public class TTransformerWinding
    extends TAbstractConductingEquipment
    implements Equals, HashCode
{

    @XmlElement(name = "TapChanger")
    protected TTapChanger tapChanger;
    @XmlAttribute(name = "type", required = true)
    protected TTransformerWindingEnum type;

    /**
     * Gets the value of the tapChanger property.
     * 
     * @return
     *     possible object is
     *     {@link TTapChanger }
     *     
     */
    @ManyToOne(targetEntity = TTapChanger.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TAP_CHANGER_TTRANSFORMER_WIN_0")
    public TTapChanger getTapChanger() {
        return tapChanger;
    }

    /**
     * Sets the value of the tapChanger property.
     * 
     * @param value
     *     allowed object is
     *     {@link TTapChanger }
     *     
     */
    public void setTapChanger(TTapChanger value) {
        this.tapChanger = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link TTransformerWindingEnum }
     *     
     */
    @Basic
    @Column(name = "TYPE_", length = 255)
    @Enumerated(EnumType.STRING)
    public TTransformerWindingEnum getType() {
        if (type == null) {
            return TTransformerWindingEnum.PTW;
        } else {
            return type;
        }
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link TTransformerWindingEnum }
     *     
     */
    public void setType(TTransformerWindingEnum value) {
        this.type = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TTransformerWinding)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TTransformerWinding that = ((TTransformerWinding) object);
        {
            TTapChanger lhsTapChanger;
            lhsTapChanger = this.getTapChanger();
            TTapChanger rhsTapChanger;
            rhsTapChanger = that.getTapChanger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tapChanger", lhsTapChanger), LocatorUtils.property(thatLocator, "tapChanger", rhsTapChanger), lhsTapChanger, rhsTapChanger)) {
                return false;
            }
        }
        {
            TTransformerWindingEnum lhsType;
            lhsType = this.getType();
            TTransformerWindingEnum rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TTapChanger theTapChanger;
            theTapChanger = this.getTapChanger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tapChanger", theTapChanger), currentHashCode, theTapChanger);
        }
        {
            TTransformerWindingEnum theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
