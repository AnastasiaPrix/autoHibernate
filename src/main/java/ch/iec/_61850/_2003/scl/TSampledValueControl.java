//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for tSampledValueControl complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tSampledValueControl">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tControlWithIEDName">
 *       &lt;sequence>
 *         &lt;element name="SmvOpts">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attGroup ref="{http://www.iec.ch/61850/2003/SCL}agSmvOpts"/>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="smvID" use="required" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;attribute name="multicast" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="smpRate" use="required" type="{http://www.w3.org/2001/XMLSchema}unsignedInt" />
 *       &lt;attribute name="nofASDU" use="required" type="{http://www.w3.org/2001/XMLSchema}unsignedInt" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tSampledValueControl", propOrder = {
    "smvOpts"
})
@Entity(name = "TSampledValueControl")
@Table(name = "TSAMPLED_VALUE_CONTROL")
public class TSampledValueControl
    extends TControlWithIEDName
    implements Equals, HashCode
{

    @XmlElement(name = "SmvOpts", required = true)
    protected TSampledValueControl.SmvOpts smvOpts;
    @XmlAttribute(name = "smvID", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String smvID;
    @XmlAttribute(name = "multicast")
    protected Boolean multicast;
    @XmlAttribute(name = "smpRate", required = true)
    @XmlSchemaType(name = "unsignedInt")
    protected long smpRateAttribute;
    @XmlAttribute(name = "nofASDU", required = true)
    @XmlSchemaType(name = "unsignedInt")
    protected long nofASDU;

    /**
     * Gets the value of the smvOpts property.
     *
     * @return
     *     possible object is
     *     {@link TSampledValueControl.SmvOpts }
     *
     */
    @ManyToOne(targetEntity = TSampledValueControl.SmvOpts.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SMV_OPTS_TSAMPLED_VALUE_CONT_0")
    public TSampledValueControl.SmvOpts getSmvOpts() {
        return smvOpts;
    }

    /**
     * Sets the value of the smvOpts property.
     *
     * @param value
     *     allowed object is
     *     {@link TSampledValueControl.SmvOpts }
     *
     */
    public void setSmvOpts(TSampledValueControl.SmvOpts value) {
        this.smvOpts = value;
    }

    /**
     * Gets the value of the smvID property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "SMV_ID", length = 255)
    public String getSmvID() {
        return smvID;
    }

    /**
     * Sets the value of the smvID property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setSmvID(String value) {
        this.smvID = value;
    }

    /**
     * Gets the value of the multicast property.
     *
     * @return
     *     possible object is
     *     {@link Boolean }
     *
     */
    @Basic
    @Column(name = "MULTICAST")
    public boolean isMulticast() {
        if (multicast == null) {
            return true;
        } else {
            return multicast;
        }
    }

    /**
     * Sets the value of the multicast property.
     *
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *
     */
    public void setMulticast(Boolean value) {
        this.multicast = value;
    }

    /**
     * Gets the value of the smpRateAttribute property.
     *
     */
    @Basic
    @Column(name = "SMP_RATE_ATTRIBUTE", precision = 10, scale = 0)
    public long getSmpRateAttribute() {
        return smpRateAttribute;
    }

    /**
     * Sets the value of the smpRateAttribute property.
     *
     */
    public void setSmpRateAttribute(long value) {
        this.smpRateAttribute = value;
    }

    /**
     * Gets the value of the nofASDU property.
     *
     */
    @Basic
    @Column(name = "NOF_ASDU", precision = 10, scale = 0)
    public long getNofASDU() {
        return nofASDU;
    }

    /**
     * Sets the value of the nofASDU property.
     *
     */
    public void setNofASDU(long value) {
        this.nofASDU = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TSampledValueControl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TSampledValueControl that = ((TSampledValueControl) object);
        {
            TSampledValueControl.SmvOpts lhsSmvOpts;
            lhsSmvOpts = this.getSmvOpts();
            TSampledValueControl.SmvOpts rhsSmvOpts;
            rhsSmvOpts = that.getSmvOpts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smvOpts", lhsSmvOpts), LocatorUtils.property(thatLocator, "smvOpts", rhsSmvOpts), lhsSmvOpts, rhsSmvOpts)) {
                return false;
            }
        }
        {
            String lhsSmvID;
            lhsSmvID = this.getSmvID();
            String rhsSmvID;
            rhsSmvID = that.getSmvID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smvID", lhsSmvID), LocatorUtils.property(thatLocator, "smvID", rhsSmvID), lhsSmvID, rhsSmvID)) {
                return false;
            }
        }
        {
            boolean lhsMulticast;
            lhsMulticast = ((this.multicast!= null)?this.isMulticast():false);
            boolean rhsMulticast;
            rhsMulticast = ((that.multicast!= null)?that.isMulticast():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multicast", lhsMulticast), LocatorUtils.property(thatLocator, "multicast", rhsMulticast), lhsMulticast, rhsMulticast)) {
                return false;
            }
        }
        {
            long lhsSmpRateAttribute;
            lhsSmpRateAttribute = this.getSmpRateAttribute();
            long rhsSmpRateAttribute;
            rhsSmpRateAttribute = that.getSmpRateAttribute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smpRateAttribute", lhsSmpRateAttribute), LocatorUtils.property(thatLocator, "smpRateAttribute", rhsSmpRateAttribute), lhsSmpRateAttribute, rhsSmpRateAttribute)) {
                return false;
            }
        }
        {
            long lhsNofASDU;
            lhsNofASDU = this.getNofASDU();
            long rhsNofASDU;
            rhsNofASDU = that.getNofASDU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nofASDU", lhsNofASDU), LocatorUtils.property(thatLocator, "nofASDU", rhsNofASDU), lhsNofASDU, rhsNofASDU)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TSampledValueControl.SmvOpts theSmvOpts;
            theSmvOpts = this.getSmvOpts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smvOpts", theSmvOpts), currentHashCode, theSmvOpts);
        }
        {
            String theSmvID;
            theSmvID = this.getSmvID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smvID", theSmvID), currentHashCode, theSmvID);
        }
        {
            boolean theMulticast;
            theMulticast = ((this.multicast!= null)?this.isMulticast():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multicast", theMulticast), currentHashCode, theMulticast);
        }
        {
            long theSmpRateAttribute;
            theSmpRateAttribute = this.getSmpRateAttribute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smpRateAttribute", theSmpRateAttribute), currentHashCode, theSmpRateAttribute);
        }
        {
            long theNofASDU;
            theNofASDU = this.getNofASDU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nofASDU", theNofASDU), currentHashCode, theNofASDU);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attGroup ref="{http://www.iec.ch/61850/2003/SCL}agSmvOpts"/>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    @Entity(name = "TSampledValueControl$SmvOpts")
    @Table(name = "SMV_OPTS")
    @Inheritance(strategy = InheritanceType.JOINED)
    public static class SmvOpts
        implements Equals, HashCode
    {

        @XmlAttribute(name = "refreshTime")
        protected Boolean refreshTime;
        @XmlAttribute(name = "sampleSynchronized")
        protected Boolean sampleSynchronized;
        @XmlAttribute(name = "sampleRate")
        protected Boolean sampleRate;
        @XmlAttribute(name = "security")
        protected Boolean security;
        @XmlAttribute(name = "dataRef")
        protected Boolean dataRef;
        @XmlAttribute(name = "Hjid")
        protected Long hjid;

        /**
         * Gets the value of the refreshTime property.
         *
         * @return
         *     possible object is
         *     {@link Boolean }
         *
         */
        @Basic
        @Column(name = "REFRESH_TIME")
        public boolean isRefreshTime() {
            if (refreshTime == null) {
                return false;
            } else {
                return refreshTime;
            }
        }

        /**
         * Sets the value of the refreshTime property.
         *
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *
         */
        public void setRefreshTime(Boolean value) {
            this.refreshTime = value;
        }

        /**
         * Gets the value of the sampleSynchronized property.
         *
         * @return
         *     possible object is
         *     {@link Boolean }
         *
         */
        @Basic
        @Column(name = "SAMPLE_SYNCHRONIZED")
        public boolean isSampleSynchronized() {
            if (sampleSynchronized == null) {
                return false;
            } else {
                return sampleSynchronized;
            }
        }

        /**
         * Sets the value of the sampleSynchronized property.
         *
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *
         */
        public void setSampleSynchronized(Boolean value) {
            this.sampleSynchronized = value;
        }

        /**
         * Gets the value of the sampleRate property.
         *
         * @return
         *     possible object is
         *     {@link Boolean }
         *
         */
        @Basic
        @Column(name = "SAMPLE_RATE")
        public boolean isSampleRate() {
            if (sampleRate == null) {
                return false;
            } else {
                return sampleRate;
            }
        }

        /**
         * Sets the value of the sampleRate property.
         *
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *
         */
        public void setSampleRate(Boolean value) {
            this.sampleRate = value;
        }

        /**
         * Gets the value of the security property.
         *
         * @return
         *     possible object is
         *     {@link Boolean }
         *
         */
        @Basic
        @Column(name = "SECURITY_")
        public boolean isSecurity() {
            if (security == null) {
                return false;
            } else {
                return security;
            }
        }

        /**
         * Sets the value of the security property.
         *
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *
         */
        public void setSecurity(Boolean value) {
            this.security = value;
        }

        /**
         * Gets the value of the dataRef property.
         *
         * @return
         *     possible object is
         *     {@link Boolean }
         *
         */
        @Basic
        @Column(name = "DATA_REF")
        public boolean isDataRef() {
            if (dataRef == null) {
                return false;
            } else {
                return dataRef;
            }
        }

        /**
         * Sets the value of the dataRef property.
         *
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *
         */
        public void setDataRef(Boolean value) {
            this.dataRef = value;
        }

        /**
         * Gets the value of the hjid property.
         *
         * @return
         *     possible object is
         *     {@link Long }
         *
         */
        @Id
        @Column(name = "HJID")
        @GeneratedValue(strategy = GenerationType.AUTO)
        public Long getHjid() {
            return hjid;
        }

        /**
         * Sets the value of the hjid property.
         *
         * @param value
         *     allowed object is
         *     {@link Long }
         *
         */
        public void setHjid(Long value) {
            this.hjid = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TSampledValueControl.SmvOpts)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TSampledValueControl.SmvOpts that = ((TSampledValueControl.SmvOpts) object);
            {
                boolean lhsRefreshTime;
                lhsRefreshTime = ((this.refreshTime!= null)?this.isRefreshTime():false);
                boolean rhsRefreshTime;
                rhsRefreshTime = ((that.refreshTime!= null)?that.isRefreshTime():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "refreshTime", lhsRefreshTime), LocatorUtils.property(thatLocator, "refreshTime", rhsRefreshTime), lhsRefreshTime, rhsRefreshTime)) {
                    return false;
                }
            }
            {
                boolean lhsSampleSynchronized;
                lhsSampleSynchronized = ((this.sampleSynchronized!= null)?this.isSampleSynchronized():false);
                boolean rhsSampleSynchronized;
                rhsSampleSynchronized = ((that.sampleSynchronized!= null)?that.isSampleSynchronized():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sampleSynchronized", lhsSampleSynchronized), LocatorUtils.property(thatLocator, "sampleSynchronized", rhsSampleSynchronized), lhsSampleSynchronized, rhsSampleSynchronized)) {
                    return false;
                }
            }
            {
                boolean lhsSampleRate;
                lhsSampleRate = ((this.sampleRate!= null)?this.isSampleRate():false);
                boolean rhsSampleRate;
                rhsSampleRate = ((that.sampleRate!= null)?that.isSampleRate():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sampleRate", lhsSampleRate), LocatorUtils.property(thatLocator, "sampleRate", rhsSampleRate), lhsSampleRate, rhsSampleRate)) {
                    return false;
                }
            }
            {
                boolean lhsSecurity;
                lhsSecurity = ((this.security!= null)?this.isSecurity():false);
                boolean rhsSecurity;
                rhsSecurity = ((that.security!= null)?that.isSecurity():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "security", lhsSecurity), LocatorUtils.property(thatLocator, "security", rhsSecurity), lhsSecurity, rhsSecurity)) {
                    return false;
                }
            }
            {
                boolean lhsDataRef;
                lhsDataRef = ((this.dataRef!= null)?this.isDataRef():false);
                boolean rhsDataRef;
                rhsDataRef = ((that.dataRef!= null)?that.isDataRef():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dataRef", lhsDataRef), LocatorUtils.property(thatLocator, "dataRef", rhsDataRef), lhsDataRef, rhsDataRef)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                boolean theRefreshTime;
                theRefreshTime = ((this.refreshTime!= null)?this.isRefreshTime():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refreshTime", theRefreshTime), currentHashCode, theRefreshTime);
            }
            {
                boolean theSampleSynchronized;
                theSampleSynchronized = ((this.sampleSynchronized!= null)?this.isSampleSynchronized():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sampleSynchronized", theSampleSynchronized), currentHashCode, theSampleSynchronized);
            }
            {
                boolean theSampleRate;
                theSampleRate = ((this.sampleRate!= null)?this.isSampleRate():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sampleRate", theSampleRate), currentHashCode, theSampleRate);
            }
            {
                boolean theSecurity;
                theSecurity = ((this.security!= null)?this.isSecurity():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "security", theSecurity), currentHashCode, theSecurity);
            }
            {
                boolean theDataRef;
                theDataRef = ((this.dataRef!= null)?this.isDataRef():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataRef", theDataRef), currentHashCode, theDataRef);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

    }

}
