//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tSubNetwork complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tSubNetwork">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tNaming">
 *       &lt;sequence>
 *         &lt;element name="BitRate" type="{http://www.iec.ch/61850/2003/SCL}tBitRateInMbPerSec" minOccurs="0"/>
 *         &lt;element name="ConnectedAP" type="{http://www.iec.ch/61850/2003/SCL}tConnectedAP" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tSubNetwork", propOrder = {
    "bitRate",
    "connectedAP"
})
@Entity(name = "TSubNetwork")
@Table(name = "TSUB_NETWORK")
public class TSubNetwork
    extends TNaming
    implements Equals, HashCode
{

    @XmlElement(name = "BitRate")
    protected TBitRateInMbPerSec bitRate;
    @XmlElement(name = "ConnectedAP", required = true)
    protected List<TConnectedAP> connectedAP;
    @XmlAttribute(name = "type")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String type;

    /**
     * Gets the value of the bitRate property.
     * 
     * @return
     *     possible object is
     *     {@link TBitRateInMbPerSec }
     *     
     */
    @ManyToOne(targetEntity = TBitRateInMbPerSec.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BIT_RATE_TSUB_NETWORK_HJID")
    public TBitRateInMbPerSec getBitRate() {
        return bitRate;
    }

    /**
     * Sets the value of the bitRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link TBitRateInMbPerSec }
     *     
     */
    public void setBitRate(TBitRateInMbPerSec value) {
        this.bitRate = value;
    }

    /**
     * Gets the value of the connectedAP property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the connectedAP property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConnectedAP().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TConnectedAP }
     * 
     * 
     */
    @OneToMany(targetEntity = TConnectedAP.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONNECTED_AP_TSUB_NETWORK_HJ_0")
    public List<TConnectedAP> getConnectedAP() {
        if (connectedAP == null) {
            connectedAP = new ArrayList<TConnectedAP>();
        }
        return this.connectedAP;
    }

    /**
     * 
     * 
     */
    public void setConnectedAP(List<TConnectedAP> connectedAP) {
        this.connectedAP = connectedAP;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "TYPE_", length = 255)
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TSubNetwork)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TSubNetwork that = ((TSubNetwork) object);
        {
            TBitRateInMbPerSec lhsBitRate;
            lhsBitRate = this.getBitRate();
            TBitRateInMbPerSec rhsBitRate;
            rhsBitRate = that.getBitRate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bitRate", lhsBitRate), LocatorUtils.property(thatLocator, "bitRate", rhsBitRate), lhsBitRate, rhsBitRate)) {
                return false;
            }
        }
        {
            List<TConnectedAP> lhsConnectedAP;
            lhsConnectedAP = (((this.connectedAP!= null)&&(!this.connectedAP.isEmpty()))?this.getConnectedAP():null);
            List<TConnectedAP> rhsConnectedAP;
            rhsConnectedAP = (((that.connectedAP!= null)&&(!that.connectedAP.isEmpty()))?that.getConnectedAP():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connectedAP", lhsConnectedAP), LocatorUtils.property(thatLocator, "connectedAP", rhsConnectedAP), lhsConnectedAP, rhsConnectedAP)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TBitRateInMbPerSec theBitRate;
            theBitRate = this.getBitRate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bitRate", theBitRate), currentHashCode, theBitRate);
        }
        {
            List<TConnectedAP> theConnectedAP;
            theConnectedAP = (((this.connectedAP!= null)&&(!this.connectedAP.isEmpty()))?this.getConnectedAP():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connectedAP", theConnectedAP), currentHashCode, theConnectedAP);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
