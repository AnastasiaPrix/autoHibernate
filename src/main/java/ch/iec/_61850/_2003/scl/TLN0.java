//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.hyperjaxb3.item.Item;
import org.jvnet.hyperjaxb3.item.ItemUtils;
import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tLN0 complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tLN0">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tAnyLN">
 *       &lt;sequence>
 *         &lt;element name="GSEControl" type="{http://www.iec.ch/61850/2003/SCL}tGSEControl" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="SampledValueControl" type="{http://www.iec.ch/61850/2003/SCL}tSampledValueControl" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="SettingControl" type="{http://www.iec.ch/61850/2003/SCL}tSettingControl" minOccurs="0"/>
 *         &lt;element name="SCLControl" type="{http://www.iec.ch/61850/2003/SCL}tSCLControl" minOccurs="0"/>
 *         &lt;element name="Log" type="{http://www.iec.ch/61850/2003/SCL}tLog" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="lnClass" use="required" type="{http://www.iec.ch/61850/2003/SCL}tLNClassEnum" fixed="LLN0" />
 *       &lt;attribute name="inst" use="required" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tLN0", propOrder = {
    "gseControl",
    "sampledValueControl",
    "settingControl",
    "sclControl",
    "log"
})
@XmlSeeAlso({
    LN0 .class
})
@Entity(name = "TLN0")
@Table(name = "TLN_0")
public class TLN0
    extends TAnyLN
    implements Equals, HashCode
{

    @XmlElement(name = "GSEControl")
    protected List<TGSEControl> gseControl;
    @XmlElement(name = "SampledValueControl")
    protected List<TSampledValueControl> sampledValueControl;
    @XmlElement(name = "SettingControl")
    protected TSettingControl settingControl;
    @XmlElement(name = "SCLControl")
    protected TSCLControl sclControl;
    @XmlElement(name = "Log")
    protected TLog log;
    @XmlAttribute(required = true)
    protected List<String> lnClass;
    @XmlAttribute(name = "inst", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String inst;
    protected transient List<TLN0LnClassItem> lnClassItems;

    /**
     * Gets the value of the gseControl property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the gseControl property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGSEControl().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TGSEControl }
     *
     *
     */
    @OneToMany(targetEntity = TGSEControl.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GSECONTROL_TLN__0_HJID")
    public List<TGSEControl> getGSEControl() {
        if (gseControl == null) {
            gseControl = new ArrayList<TGSEControl>();
        }
        return this.gseControl;
    }

    /**
     *
     *
     */
    public void setGSEControl(List<TGSEControl> gseControl) {
        this.gseControl = gseControl;
    }

    /**
     * Gets the value of the sampledValueControl property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sampledValueControl property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSampledValueControl().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TSampledValueControl }
     *
     *
     */
    @OneToMany(targetEntity = TSampledValueControl.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SAMPLED_VALUE_CONTROL_TLN__0_0")
    public List<TSampledValueControl> getSampledValueControl() {
        if (sampledValueControl == null) {
            sampledValueControl = new ArrayList<TSampledValueControl>();
        }
        return this.sampledValueControl;
    }

    /**
     *
     *
     */
    public void setSampledValueControl(List<TSampledValueControl> sampledValueControl) {
        this.sampledValueControl = sampledValueControl;
    }

    /**
     * Gets the value of the settingControl property.
     *
     * @return
     *     possible object is
     *     {@link TSettingControl }
     *
     */
    @ManyToOne(targetEntity = TSettingControl.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SETTING_CONTROL_TLN__0_HJID")
    public TSettingControl getSettingControl() {
        return settingControl;
    }

    /**
     * Sets the value of the settingControl property.
     *
     * @param value
     *     allowed object is
     *     {@link TSettingControl }
     *
     */
    public void setSettingControl(TSettingControl value) {
        this.settingControl = value;
    }

    /**
     * Gets the value of the sclControl property.
     *
     * @return
     *     possible object is
     *     {@link TSCLControl }
     *
     */
    @ManyToOne(targetEntity = TSCLControl.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SCLCONTROL_TLN__0_HJID")
    public TSCLControl getSCLControl() {
        return sclControl;
    }

    /**
     * Sets the value of the sclControl property.
     *
     * @param value
     *     allowed object is
     *     {@link TSCLControl }
     *
     */
    public void setSCLControl(TSCLControl value) {
        this.sclControl = value;
    }

    /**
     * Gets the value of the log property.
     *
     * @return
     *     possible object is
     *     {@link TLog }
     *
     */
    @ManyToOne(targetEntity = TLog.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOG_TLN__0_HJID")
    public TLog getLog() {
        return log;
    }

    /**
     * Sets the value of the log property.
     *
     * @param value
     *     allowed object is
     *     {@link TLog }
     *
     */
    public void setLog(TLog value) {
        this.log = value;
    }

    /**
     * Gets the value of the lnClass property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the lnClass property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLnClass().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     *
     *
     */
    @Transient
    public List<String> getLnClass() {
        if (lnClass == null) {
            lnClass = new ArrayList<String>();
        }
        return this.lnClass;
    }

    /**
     *
     *
     */
    public void setLnClass(List<String> lnClass) {
        this.lnClass = lnClass;
    }

    /**
     * Gets the value of the inst property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "INST", length = 255)
    public String getInst() {
        return inst;
    }

    /**
     * Sets the value of the inst property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setInst(String value) {
        this.inst = value;
    }

    @OneToMany(targetEntity = TLN0 .TLN0LnClassItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LN_CLASS_ITEMS_TLN__0_HJID")
    public List<TLN0LnClassItem> getLnClassItems() {
        if (this.lnClassItems == null) {
            this.lnClassItems = new ArrayList<TLN0LnClassItem>();
        }
        if (ItemUtils.shouldBeWrapped(this.lnClass)) {
            this.lnClass = ItemUtils.wrap(this.lnClass, this.lnClassItems, TLN0 .TLN0LnClassItem.class);
        }
        return this.lnClassItems;
    }

    public void setLnClassItems(List<TLN0LnClassItem> value) {
        this.lnClass = null;
        this.lnClassItems = null;
        this.lnClassItems = value;
        if (this.lnClassItems == null) {
            this.lnClassItems = new ArrayList<TLN0LnClassItem>();
        }
        if (ItemUtils.shouldBeWrapped(this.lnClass)) {
            this.lnClass = ItemUtils.wrap(this.lnClass, this.lnClassItems, TLN0 .TLN0LnClassItem.class);
        }
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TLN0)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TLN0 that = ((TLN0) object);
        {
            List<TGSEControl> lhsGSEControl;
            lhsGSEControl = (((this.gseControl!= null)&&(!this.gseControl.isEmpty()))?this.getGSEControl():null);
            List<TGSEControl> rhsGSEControl;
            rhsGSEControl = (((that.gseControl!= null)&&(!that.gseControl.isEmpty()))?that.getGSEControl():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gseControl", lhsGSEControl), LocatorUtils.property(thatLocator, "gseControl", rhsGSEControl), lhsGSEControl, rhsGSEControl)) {
                return false;
            }
        }
        {
            List<TSampledValueControl> lhsSampledValueControl;
            lhsSampledValueControl = (((this.sampledValueControl!= null)&&(!this.sampledValueControl.isEmpty()))?this.getSampledValueControl():null);
            List<TSampledValueControl> rhsSampledValueControl;
            rhsSampledValueControl = (((that.sampledValueControl!= null)&&(!that.sampledValueControl.isEmpty()))?that.getSampledValueControl():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sampledValueControl", lhsSampledValueControl), LocatorUtils.property(thatLocator, "sampledValueControl", rhsSampledValueControl), lhsSampledValueControl, rhsSampledValueControl)) {
                return false;
            }
        }
        {
            TSettingControl lhsSettingControl;
            lhsSettingControl = this.getSettingControl();
            TSettingControl rhsSettingControl;
            rhsSettingControl = that.getSettingControl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "settingControl", lhsSettingControl), LocatorUtils.property(thatLocator, "settingControl", rhsSettingControl), lhsSettingControl, rhsSettingControl)) {
                return false;
            }
        }
        {
            TSCLControl lhsSCLControl;
            lhsSCLControl = this.getSCLControl();
            TSCLControl rhsSCLControl;
            rhsSCLControl = that.getSCLControl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sclControl", lhsSCLControl), LocatorUtils.property(thatLocator, "sclControl", rhsSCLControl), lhsSCLControl, rhsSCLControl)) {
                return false;
            }
        }
        {
            TLog lhsLog;
            lhsLog = this.getLog();
            TLog rhsLog;
            rhsLog = that.getLog();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "log", lhsLog), LocatorUtils.property(thatLocator, "log", rhsLog), lhsLog, rhsLog)) {
                return false;
            }
        }
        {
            List<String> lhsLnClass;
            lhsLnClass = (((this.lnClass!= null)&&(!this.lnClass.isEmpty()))?this.getLnClass():null);
            List<String> rhsLnClass;
            rhsLnClass = (((that.lnClass!= null)&&(!that.lnClass.isEmpty()))?that.getLnClass():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lnClass", lhsLnClass), LocatorUtils.property(thatLocator, "lnClass", rhsLnClass), lhsLnClass, rhsLnClass)) {
                return false;
            }
        }
        {
            String lhsInst;
            lhsInst = this.getInst();
            String rhsInst;
            rhsInst = that.getInst();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "inst", lhsInst), LocatorUtils.property(thatLocator, "inst", rhsInst), lhsInst, rhsInst)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<TGSEControl> theGSEControl;
            theGSEControl = (((this.gseControl!= null)&&(!this.gseControl.isEmpty()))?this.getGSEControl():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gseControl", theGSEControl), currentHashCode, theGSEControl);
        }
        {
            List<TSampledValueControl> theSampledValueControl;
            theSampledValueControl = (((this.sampledValueControl!= null)&&(!this.sampledValueControl.isEmpty()))?this.getSampledValueControl():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sampledValueControl", theSampledValueControl), currentHashCode, theSampledValueControl);
        }
        {
            TSettingControl theSettingControl;
            theSettingControl = this.getSettingControl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "settingControl", theSettingControl), currentHashCode, theSettingControl);
        }
        {
            TSCLControl theSCLControl;
            theSCLControl = this.getSCLControl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sclControl", theSCLControl), currentHashCode, theSCLControl);
        }
        {
            TLog theLog;
            theLog = this.getLog();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "log", theLog), currentHashCode, theLog);
        }
        {
            List<String> theLnClass;
            theLnClass = (((this.lnClass!= null)&&(!this.lnClass.isEmpty()))?this.getLnClass():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lnClass", theLnClass), currentHashCode, theLnClass);
        }
        {
            String theInst;
            theInst = this.getInst();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "inst", theInst), currentHashCode, theInst);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @Entity(name = "TLN0$TLN0LnClassItem")
    @Table(name = "TLN_0LN_CLASS_ITEM")
    @Inheritance(strategy = InheritanceType.JOINED)
    public static class TLN0LnClassItem
        implements Item<String>
    {

        @XmlElement(name = "LnClass")
        protected String item;
        @XmlAttribute(name = "Hjid")
        protected Long hjid;

        /**
         * Gets the value of the item property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        @Basic
        @Column(name = "ITEM")
        public String getItem() {
            return item;
        }

        /**
         * Sets the value of the item property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setItem(String value) {
            this.item = value;
        }

        /**
         * Gets the value of the hjid property.
         * 
         * @return
         *     possible object is
         *     {@link Long }
         *     
         */
        @Id
        @Column(name = "HJID")
        @GeneratedValue(strategy = GenerationType.AUTO)
        public Long getHjid() {
            return hjid;
        }

        /**
         * Sets the value of the hjid property.
         * 
         * @param value
         *     allowed object is
         *     {@link Long }
         *     
         */
        public void setHjid(Long value) {
            this.hjid = value;
        }

    }

}
