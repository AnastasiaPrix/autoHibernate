//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tAbstractConductingEquipment complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tAbstractConductingEquipment">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iec.ch/61850/2003/SCL}tEquipment">
 *       &lt;sequence>
 *         &lt;element name="Terminal" type="{http://www.iec.ch/61850/2003/SCL}tTerminal" maxOccurs="2" minOccurs="0"/>
 *         &lt;element name="SubEquipment" type="{http://www.iec.ch/61850/2003/SCL}tSubEquipment" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tAbstractConductingEquipment", propOrder = {
    "terminal",
    "subEquipment"
})
@XmlSeeAlso({
    TConductingEquipment.class,
    TTransformerWinding.class
})
@Entity(name = "TAbstractConductingEquipment")
@Table(name = "TABSTRACT_CONDUCTING_EQUIPME_0")
public abstract class TAbstractConductingEquipment
    extends TEquipment
    implements Equals, HashCode
{

    @XmlElement(name = "Terminal")
    protected List<TTerminal> terminal;
    @XmlElement(name = "SubEquipment")
    protected List<TSubEquipment> subEquipment;

    /**
     * Gets the value of the terminal property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the terminal property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTerminal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TTerminal }
     * 
     * 
     */
    @OneToMany(targetEntity = TTerminal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TERMINAL_TABSTRACT_CONDUCTIN_0")
    public List<TTerminal> getTerminal() {
        if (terminal == null) {
            terminal = new ArrayList<TTerminal>();
        }
        return this.terminal;
    }

    /**
     * 
     * 
     */
    public void setTerminal(List<TTerminal> terminal) {
        this.terminal = terminal;
    }

    /**
     * Gets the value of the subEquipment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subEquipment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubEquipment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TSubEquipment }
     * 
     * 
     */
    @OneToMany(targetEntity = TSubEquipment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUB_EQUIPMENT_TABSTRACT_COND_0")
    public List<TSubEquipment> getSubEquipment() {
        if (subEquipment == null) {
            subEquipment = new ArrayList<TSubEquipment>();
        }
        return this.subEquipment;
    }

    /**
     * 
     * 
     */
    public void setSubEquipment(List<TSubEquipment> subEquipment) {
        this.subEquipment = subEquipment;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TAbstractConductingEquipment)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TAbstractConductingEquipment that = ((TAbstractConductingEquipment) object);
        {
            List<TTerminal> lhsTerminal;
            lhsTerminal = (((this.terminal!= null)&&(!this.terminal.isEmpty()))?this.getTerminal():null);
            List<TTerminal> rhsTerminal;
            rhsTerminal = (((that.terminal!= null)&&(!that.terminal.isEmpty()))?that.getTerminal():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "terminal", lhsTerminal), LocatorUtils.property(thatLocator, "terminal", rhsTerminal), lhsTerminal, rhsTerminal)) {
                return false;
            }
        }
        {
            List<TSubEquipment> lhsSubEquipment;
            lhsSubEquipment = (((this.subEquipment!= null)&&(!this.subEquipment.isEmpty()))?this.getSubEquipment():null);
            List<TSubEquipment> rhsSubEquipment;
            rhsSubEquipment = (((that.subEquipment!= null)&&(!that.subEquipment.isEmpty()))?that.getSubEquipment():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subEquipment", lhsSubEquipment), LocatorUtils.property(thatLocator, "subEquipment", rhsSubEquipment), lhsSubEquipment, rhsSubEquipment)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<TTerminal> theTerminal;
            theTerminal = (((this.terminal!= null)&&(!this.terminal.isEmpty()))?this.getTerminal():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "terminal", theTerminal), currentHashCode, theTerminal);
        }
        {
            List<TSubEquipment> theSubEquipment;
            theSubEquipment = (((this.subEquipment!= null)&&(!this.subEquipment.isEmpty()))?this.getSubEquipment():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subEquipment", theSubEquipment), currentHashCode, theSubEquipment);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
