//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.13 at 07:58:15 PM MSK 
//


package ch.iec._61850._2003.scl;

import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.persistence.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for tHeader complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tHeader">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Text" type="{http://www.iec.ch/61850/2003/SCL}tText" minOccurs="0"/>
 *         &lt;element name="History" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="Hitem" type="{http://www.iec.ch/61850/2003/SCL}tHitem" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;attribute name="revision" type="{http://www.w3.org/2001/XMLSchema}normalizedString" default="" />
 *       &lt;attribute name="toolID" type="{http://www.w3.org/2001/XMLSchema}normalizedString" />
 *       &lt;attribute name="nameStructure" default="IEDName">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}Name">
 *             &lt;enumeration value="IEDName"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tHeader", propOrder = {
    "text",
    "history"
})
@Entity(name = "THeader")
@Table(name = "THEADER")
@Inheritance(strategy = InheritanceType.JOINED)
public class THeader
    implements Equals, HashCode
{

    @XmlElement(name = "Text")
    protected TText text;
    @XmlElement(name = "History")
    protected THeader.History history;
    @XmlAttribute(name = "id", required = true)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String id;
    @XmlAttribute(name = "version")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String version;
    @XmlAttribute(name = "revision")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String revision;
    @XmlAttribute(name = "toolID")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String toolID;
    @XmlAttribute(name = "nameStructure")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String nameStructure;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;

    /**
     * Gets the value of the text property.
     *
     * @return
     *     possible object is
     *     {@link TText }
     *
     */
    @ManyToOne(targetEntity = TText.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_THEADER_HJID")
    public TText getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     *
     * @param value
     *     allowed object is
     *     {@link TText }
     *
     */
    public void setText(TText value) {
        this.text = value;
    }

    /**
     * Gets the value of the history property.
     *
     * @return
     *     possible object is
     *     {@link THeader.History }
     *
     */
    @ManyToOne(targetEntity = THeader.History.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HISTORY_THEADER_HJID")
    public THeader.History getHistory() {
        return history;
    }

    /**
     * Sets the value of the history property.
     *
     * @param value
     *     allowed object is
     *     {@link THeader.History }
     *
     */
    public void setHistory(THeader.History value) {
        this.history = value;
    }

    /**
     * Gets the value of the id property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "ID", length = 255)
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the version property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "VERSION_", length = 255)
    public String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setVersion(String value) {
        this.version = value;
    }

    /**
     * Gets the value of the revision property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "REVISION", length = 255)
    public String getRevision() {
        if (revision == null) {
            return "";
        } else {
            return revision;
        }
    }

    /**
     * Sets the value of the revision property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setRevision(String value) {
        this.revision = value;
    }

    /**
     * Gets the value of the toolID property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "TOOL_ID", length = 255)
    public String getToolID() {
        return toolID;
    }

    /**
     * Sets the value of the toolID property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setToolID(String value) {
        this.toolID = value;
    }

    /**
     * Gets the value of the nameStructure property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Basic
    @Column(name = "NAME_STRUCTURE")
    public String getNameStructure() {
        if (nameStructure == null) {
            return "IEDName";
        } else {
            return nameStructure;
        }
    }

    /**
     * Sets the value of the nameStructure property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setNameStructure(String value) {
        this.nameStructure = value;
    }

    /**
     * Gets the value of the hjid property.
     *
     * @return
     *     possible object is
     *     {@link Long }
     *
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * Sets the value of the hjid property.
     *
     * @param value
     *     allowed object is
     *     {@link Long }
     *
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof THeader)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final THeader that = ((THeader) object);
        {
            TText lhsText;
            lhsText = this.getText();
            TText rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            THeader.History lhsHistory;
            lhsHistory = this.getHistory();
            THeader.History rhsHistory;
            rhsHistory = that.getHistory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "history", lhsHistory), LocatorUtils.property(thatLocator, "history", rhsHistory), lhsHistory, rhsHistory)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsVersion;
            lhsVersion = this.getVersion();
            String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            String lhsRevision;
            lhsRevision = this.getRevision();
            String rhsRevision;
            rhsRevision = that.getRevision();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "revision", lhsRevision), LocatorUtils.property(thatLocator, "revision", rhsRevision), lhsRevision, rhsRevision)) {
                return false;
            }
        }
        {
            String lhsToolID;
            lhsToolID = this.getToolID();
            String rhsToolID;
            rhsToolID = that.getToolID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "toolID", lhsToolID), LocatorUtils.property(thatLocator, "toolID", rhsToolID), lhsToolID, rhsToolID)) {
                return false;
            }
        }
        {
            String lhsNameStructure;
            lhsNameStructure = this.getNameStructure();
            String rhsNameStructure;
            rhsNameStructure = that.getNameStructure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nameStructure", lhsNameStructure), LocatorUtils.property(thatLocator, "nameStructure", rhsNameStructure), lhsNameStructure, rhsNameStructure)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TText theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            THeader.History theHistory;
            theHistory = this.getHistory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "history", theHistory), currentHashCode, theHistory);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            String theRevision;
            theRevision = this.getRevision();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "revision", theRevision), currentHashCode, theRevision);
        }
        {
            String theToolID;
            theToolID = this.getToolID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toolID", theToolID), currentHashCode, theToolID);
        }
        {
            String theNameStructure;
            theNameStructure = this.getNameStructure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nameStructure", theNameStructure), currentHashCode, theNameStructure);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="Hitem" type="{http://www.iec.ch/61850/2003/SCL}tHitem" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "hitem"
    })
    @Entity(name = "THeader$History")
    @Table(name = "HISTORY")
    @Inheritance(strategy = InheritanceType.JOINED)
    public static class History
        implements Equals, HashCode
    {

        @XmlElement(name = "Hitem", required = true)
        protected List<THitem> hitem;
        @XmlAttribute(name = "Hjid")
        protected Long hjid;

        /**
         * Gets the value of the hitem property.
         *
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the hitem property.
         *
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getHitem().add(newItem);
         * </pre>
         *
         *
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link THitem }
         *
         *
         */
        @OneToMany(targetEntity = THitem.class, cascade = {
            CascadeType.ALL
        })
        @JoinColumn(name = "HITEM_HISTORY_HJID")
        public List<THitem> getHitem() {
            if (hitem == null) {
                hitem = new ArrayList<THitem>();
            }
            return this.hitem;
        }

        /**
         *
         *
         */
        public void setHitem(List<THitem> hitem) {
            this.hitem = hitem;
        }

        /**
         * Gets the value of the hjid property.
         *
         * @return
         *     possible object is
         *     {@link Long }
         *
         */
        @Id
        @Column(name = "HJID")
        @GeneratedValue(strategy = GenerationType.AUTO)
        public Long getHjid() {
            return hjid;
        }

        /**
         * Sets the value of the hjid property.
         *
         * @param value
         *     allowed object is
         *     {@link Long }
         *
         */
        public void setHjid(Long value) {
            this.hjid = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof THeader.History)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final THeader.History that = ((THeader.History) object);
            {
                List<THitem> lhsHitem;
                lhsHitem = (((this.hitem!= null)&&(!this.hitem.isEmpty()))?this.getHitem():null);
                List<THitem> rhsHitem;
                rhsHitem = (((that.hitem!= null)&&(!that.hitem.isEmpty()))?that.getHitem():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hitem", lhsHitem), LocatorUtils.property(thatLocator, "hitem", rhsHitem), lhsHitem, rhsHitem)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<THitem> theHitem;
                theHitem = (((this.hitem!= null)&&(!this.hitem.isEmpty()))?this.getHitem():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hitem", theHitem), currentHashCode, theHitem);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

    }

}
